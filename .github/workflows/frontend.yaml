name: CI

on:
  push:
    branches:
      - main
    #     - release/**
  #  paths:
  #      - "frontend_react/**"

  workflow_run:
    workflows: ["Terraform"]
    types:
      - completed

  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - prod

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ENVIRONMENT: ${{ github.event_name == 'workflow_dispatch'
    && github.event.inputs.environment
    || (github.ref_name == 'release/dev' && 'dev'
    || github.ref_name == 'release/stage' && 'stage'
    || 'prod') }}

permissions:
  contents: write

jobs:
  # Step 1: Detect if app changed to avoid building
  filter:
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.filter.outputs.app }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for folder changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            app:
              - 'frontend_react/**'
          base: ${{ github.event.before }}

  # Step 2: Download TF state from S3 and save outputs as artifact
  tf-outputs:
    runs-on: ubuntu-latest
    needs: filter
    if: |
      needs.filter.outputs.app_changed == 'true' &&
      (
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
        (github.event_name == 'push' || github.event_name == 'workflow_run')
      )

    steps:
      - uses: actions/checkout@v4
      - name: Load TF Outputs from s3
        uses: ./.github/actions/load-tf-outputs-s3
        with:
          environment: ${{ env.ENVIRONMENT }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-account-id: ${{ env.AWS_ACCOUNT_ID }}

  # Semantic versioning
  versioning:
    runs-on: ubuntu-latest
    needs: filter
    if: |
      needs.filter.outputs.app_changed == 'true' &&
      (
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
        (github.event_name == 'push' || github.event_name == 'workflow_run')
      )

    outputs:
      new_version: ${{ steps.bump.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - run: chmod +x ./.github/actions/scripts/bump-version.sh
      - id: bump
        run: ./.github/actions/scripts/bump-version.sh

  # Build and push Docker image to ECR
  push:
    runs-on: ubuntu-latest
    needs: [versioning, tf-outputs, build]
    env:
      VERSION: ${{ needs.versioning.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Load TF Outputs
        uses: ./.github/actions/load-tf-outputs

      - name: Build, tag, and push image to ECR
        run: |
          echo "ECR_REGISTRY=$FRONTEND_URL"
          echo "VERSION=$VERSION"
          docker build -t $FRONTEND_URL:$VERSION ./app
          docker push $FRONTEND_URL:$VERSION

  # Create Git tag
  tag_release:
    runs-on: ubuntu-latest
    needs: [push, versioning]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - run: |
          VERSION=${{ needs.versioning.outputs.new_version }}
          git tag $VERSION-frontend
          git push origin $VERSION-frontend
